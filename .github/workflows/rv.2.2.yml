name: rv.2.2

on:
  push:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at 00:00
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  security-risk-management:
    name: Security Risk Management for Terraform
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get the entire Git history

      # Step 2: Install the latest version of Trivy
      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.60.0_Linux-64bit.tar.gz
          tar -xzf trivy_0.60.0_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      # Step 3: Scan the entire project for vulnerabilities using Trivy
      - name: Scan repository for vulnerabilities (entire project)
        id: trivy
        run: |
          trivy fs --security-checks vuln,config --format json --output trivy-report.json --severity HIGH,CRITICAL --vuln-type os,library --ignore-unfixed ../../

      # Step 4: Scan Terraform code with Checkov for Azure-specific vulnerabilities (don't fail on findings)
      - name: Scan Terraform with Checkov (don't fail on findings)
        run: |
          pip install checkov  # Install Checkov
          checkov -d ./modules --check Azure --output json > checkov-report.json  # Scan the modules directory
          cat checkov-report.json || echo "Checkov report not found!"  # Output the Checkov report for debugging

      # Step 5: Ensure the Trivy report exists
      - name: Ensure Trivy report exists
        run: |
          if [ ! -f trivy-report.json ]; then
            echo "Error: trivy-report.json was not generated!"
            exit 1
          fi

      # Step 6: Ensure Checkov report exists
      - name: Ensure Checkov report exists
        run: |
          if [ ! -f checkov-report.json ]; then
            echo "Error: checkov-report.json was not generated!"
            exit 1
          fi

      # Step 7: Debug output for Checkov report (for troubleshooting)
      - name: Debug Checkov report
        run: |
          echo "Checkov Report Content:" && \
          cat checkov-report.json || echo "Checkov report is empty or not generated!"

      # Step 8: Generate the advisory report
      - name: Generate a report of vulnerabilities and update GitHub issues
        id: generate-advisory
        run: |
          echo "Generating advisory report..." && \
          node generate_advisory.js trivy-report.json checkov-report.json && \
          echo "Report generated:" && \
          cat detailed_advisory.md && \
          gh issue create --title "Security advisory: Critical vulnerabilities discovered" --body "$(cat detailed_advisory.md)" --label "security"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the built-in GITHUB_TOKEN for authentication

      # Step 9: Save the final reports as artifacts
      - name: Save the report as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-risk-report
          path: |
            trivy-report.json
            checkov-report.json
            detailed_advisory.md
