name: RV.2.2 - Security Risk Management

on:
  push:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 1' # Run every Monday at 00:00
  workflow_dispatch: # Allow manual triggering of the workflow

jobs: 
  security-risk-management:
    name: Security Risk Management
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get the entire Git history
    
      # Step 1: Scan repository for vulnerabilities using Trivy
      - name: Scan repository for vulnerabilities
        id: trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.60.0_Linux-64bit.tar.gz
          tar -xzf trivy_0.60.0_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

          # Initialiser og oppdater submoduler
          git submodule update --init --recursive

          # Debugging: Sjekk nåværende katalog
          pwd
          ls -la

          # Kjør Trivy filsystemskanning med riktige flag
          trivy fs --scanners vuln,misconfig --format json --output trivy-report.json --severity HIGH,CRITICAL --pkg-types os,library --ignore-unfixed .

          # Kjør Trivy konfigurasjonssjekk med riktige flag
          trivy config --scanners misconfig --format json --severity HIGH,CRITICAL --output trivy-config-report.json .

          # Debugging: Bekreft at filene er generert
          ls -la
          if [ ! -s trivy-report.json ]; then
            echo "❌ trivy-report.json ble ikke funnet eller er tom!"
            exit 1
          else
            echo "✅ trivy-report.json funnet!"
          fi

      # Step 2: Lagre Trivy rapporten som en artefakt
      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      # Step 3: Scan Terraform code with Checkov for Azure-specific vulnerabilities
      - name: Scan Terraform with Checkov
        continue-on-error: true
        run: |
          pip install checkov  # Install Checkov
          checkov -d . --framework terraform --download-external-modules true --output json > checkov-report.json
          cat checkov-report.json || echo "Checkov report not found!"  # Output the Checkov report for debugging

      # Step 4: Output Checkov summary
      - name: Output Checkov summary
        id: checkov-summary
        run: |
          echo "Parsing Checkov report..."
          if [ -f checkov-report.json ]; then
            passed=$(jq '.summary.passed' checkov-report.json)
            failed=$(jq '.summary.failed' checkov-report.json)
            skipped=$(jq '.summary.skipped' checkov-report.json)
