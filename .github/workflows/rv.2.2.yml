name: rv.2.2

on:
  push:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at 00:00
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs: 
  security-risk-management:
    name: Security Risk Management
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get the entire Git history
    
      # Step 1: Scan repository for vulnerabilities
      - name: Scan repository for vulnerabilities
        id: trivy
        # Uses the Trivy action to scan the repository for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
            format: json  # Shows the scan results in the terminal and saves them to a JSON file
            output: trivy-report.json  # Save the results to a JSON file
            exit-code: 0
            severity: HIGH,CRITICAL
            vuln-type: os,library
            ignore-unfixed: false
      
      # Step 2: Scan Terraform code with Checkov for Azure-specific vulnerabilities
      - name: Scan Terraform with Checkov
        continue-on-error: true
        run: |
          pip install checkov  # Install Checkov
          checkov -d . --framework terraform --output json > checkov-report.json  # Scan the entire repository
          cat checkov-report.json || echo "Checkov report not found!"  # Output the Checkov report for debugging

      # Step 3: Output Checkov summary
      - name: Output Checkov summary
        id: checkov-summary
        run: |
          echo "Parsing Checkov report..."
          if [ -f checkov-report.json ]; then
            passed=$(jq '.summary.passed' checkov-report.json)
            failed=$(jq '.summary.failed' checkov-report.json)
            skipped=$(jq '.summary.skipped' checkov-report.json)
            parsing_errors=$(jq '.summary.parsing_errors' checkov-report.json)
            echo "Checkov Summary:" > checkov-summary.md
            echo "Passed checks: $passed" >> checkov-summary.md
            echo "Failed checks: $failed" >> checkov-summary.md
            echo "Skipped checks: $skipped" >> checkov-summary.md
            echo "Parsing errors: $parsing_errors" >> checkov-summary.md
          else
            echo "Checkov report not found!" > checkov-summary.md
          
      # Step 4: Scan the remote GitHub repository for vulnerabilities using Trivy repo
      - name: Scan the remote GitHub repository for vulnerabilities (Trivy repo)
        id: trivy-repo
        run: |
          trivy repo https://github.com/advisense/iac-azure-terraform-example.git --format json --output trivy-repo-report.json --severity HIGH,CRITICAL --vuln-type os,library --ignore-unfixed false

      # Step 5: Scan the remote GitHub repository for IaC vulnerabilities using Trivy config
      - name: Scan the remote GitHub repository for IaC vulnerabilities (Trivy config)
        id: trivy-config
        run: |
          trivy config https://github.com/advisense/iac-azure-terraform-example.git --format json --output trivy-config-report.json --severity HIGH,CRITICAL --ignore-unfixed false

      # Step 6: Rate the severity of the vulnerabilities and prioritize them
      - name: Rate the severity of the vulnerabilities and prioritize them
        id: evaluate-vulnerabilities
        run: | 
          if [ ! -f trivy-report.json ]; then
            echo "trivy-report.json not found!"
            exit 1
          fi
          echo "Rating and prioritizing vulnerabilities..."
          node evaluate_risk.js trivy-report.json > risk_report.md

      # Step 7: If there is no permanent fix, create a temporary fix
      - name: Create a temporary fix
        id: apply-workarounds
        run: |
          echo "Checking if risk_report.md exists..."
          if [ ! -f risk_report.md ]; then
            echo "risk_report.md not found!"
            exit 1
          fi
          echo "risk_report.md found. Proceeding with temporary fixes..."
          echo "Creating temporary fixes..."
          node implement_workarounds.js risk_report.md
          echo "Temporary fixes applied successfully."

      # Step 8: Generate a detailed report of the vulnerabilities and update GitHub issues
      - name: Generate a detailed report of the vulnerabilities and update GitHub issues 
        id: generate-advisory 
        run: | 
          echo "Generating detailed report..." && \
          node generate_advisory.js trivy-report.json checkov-report.json && \
          echo "Detailed report generated:" && \
          cat detailed_advisory.md && \
          echo "Checkov Summary:" && \
          cat checkov-summary.md && \
          gh issue create --title "Security advisory: Critical vulnerabilities discovered" --body "$(cat detailed_advisory.md)\n\n$(cat checkov-summary.md)" --label "security"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the built-in GITHUB_TOKEN

      # Step 9: Update documentation with risk assessment
      - name: Update documentation with risk assessment
        run: |
          echo "Updating documentation..."
          node update_documentation.js risk_report.md detailed_advisory.md checkov-summary.md

      # Step 10: Save the reports as an artifact
      - name: Save the report as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-risk-report
          path: |
            trivy-report.json
            checkov-report.json
            trivy-repo-report.json
            trivy-config-report.json
            risk_report.md
            detailed_advisory.md
            checkov-summary.md
