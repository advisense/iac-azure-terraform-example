name: Security Risk Management

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 1' # Run every Monday at 00:00
  workflow_dispatch: # Allow manual triggering of the workflow

jobs: 
  security-risk-management:
    name: Security Risk Management
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      # Step 1: Scan repository for vulnerabilities using Trivy
      - name: Scan repository for vulnerabilities
        id: trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.60.0_Linux-64bit.tar.gz
          tar -xzf trivy_0.60.0_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/
          trivy fs --scanners vuln,config --format json --output trivy-report.json --severity HIGH,CRITICAL --pkg-types os,library .

      # Step 2: Scan Terraform code with Checkov for Azure-specific vulnerabilities
      - name: Scan Terraform with Checkov
        continue-on-error: true
        run: |
          pip install checkov  # Install Checkov
          checkov -d . --framework terraform --output json > checkov-report.json  # Scan the entire repository
          cat checkov-report.json || echo "Checkov report not found!"  # Output the Checkov report for debugging

      # Step 3: Rate the severity of the vulnerabilities and prioritize them
      - name: Rate the severity of the vulnerabilities and prioritize them
        id: evaluate-vulnerabilities
        run: | 
          if [ ! -f trivy-report.json ]; then
            echo "trivy-report.json not found!"
            exit 1
          fi
          echo "Rating and prioritizing vulnerabilities..."
          node evaluate_risk.js trivy-report.json > risk_report.md
        
      # Step 4: If there is no permanent fix, create a temporary fix
      - name: Create a temporary fix
        id: apply-workarounds
        run: |
          echo "Checking if risk_report.md exists..."
          if [ ! -f risk_report.md ]; then
            echo "risk_report.md not found!"
            exit 1
          fi
          echo "risk_report.md found. Proceeding with temporary fixes..."
          echo "Creating temporary fixes..."
          node implement_workarounds.js risk_report.md
          echo "Temporary fixes applied successfully."

      # Step 5: Generate a detailed report of the vulnerabilities and the temporary fixes
      - name: Generate a detailed report of the vulnerabilities and update GitHub issues 
        id: generate-advisory 
        run: | 
          echo "Generating detailed report..." && \
          node generate_detailed_advisory.js trivy-report.json checkov-report.json && \
          echo "Detailed report generated:" && \
          cat detailed_advisory.md && \
          gh issue create --title "Security advisory: Critical vulnerabilities discovered" --body "$(cat detailed_advisory.md)" --label "security"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Bruk den innebygde GITHUB_TOKEN
        
      # Step 6: Update documentation
      - name: Update documentation with risk assessment
        run: |
          echo "Updating documentation..."
          node update_documentation.js risk_report.md detailed_advisory.md

      # Step 7: Save the report as an artifact
      - name: Save the report as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-risk-report
          path: |
            trivy-report.json
            checkov-report.json
            risk_report.md
            detailed_advisory.md