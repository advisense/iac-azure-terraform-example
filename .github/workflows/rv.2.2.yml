name: Security Risk Management

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 1'  # Kjør hver mandag kl. 00:00
  workflow_dispatch:  # Tillat manuell kjøring

jobs:
  security-risk-management:
    name: Security Risk Management
    runs-on: ubuntu-latest

    steps:
      # Steg 1: Sjekk ut repoet
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Hent hele historikken
    
      # Steg 2: Installer Trivy
      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.60.0_Linux-64bit.tar.gz
          tar -xzf trivy_0.60.0_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      # Steg 3: Scan hele repoet med Trivy (inkludert modules/)
      - name: Scan repository for vulnerabilities
        id: trivy
        run: |
          echo "Starter Trivy-skanning..."
          trivy fs --security-checks vuln,config --format json --output trivy-report.json --severity HIGH,CRITICAL --vuln-type os,library --ignore-unfixed .

      # Steg 4: Installer og kjør Checkov på modules/
      - name: Scan Terraform with Checkov
        run: |
          pip install checkov
          echo "Starter Checkov-skanning..."
          checkov -d modules/ --framework terraform --output json > checkov-report.json
          cat checkov-report.json || echo "Checkov report not found!"

      # Steg 5: Sjekk om Trivy-rapporten ble generert
      - name: Ensure Trivy report exists
        run: |
          if [ ! -f trivy-report.json ]; then
            echo "Error: trivy-report.json was not generated!"
            exit 1
          fi
      
      # Steg 6: Evaluer risiko basert på funnene
      - name: Evaluate risk based on Trivy report
        run: |
          echo "Evaluating risk..."
          node evaluate_risk.js trivy-report.json > risk_report.md
          cat risk_report.md

      # Steg 7: Generer sikkerhetsrapport og opprett GitHub Issue hvis det er kritiske funn
      - name: Generate advisory report
        run: |
          echo "Generating advisory report..."
          node generate_advisory.js trivy-report.json checkov-report.json > advisory.md
          cat advisory.md
          
          # Opprett en GitHub Issue hvis det er alvorlige funn
          gh issue create --title "Security Advisory: Critical Vulnerabilities Found" --body "$(cat advisory.md)" --label "security"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Steg 8: Oppdater dokumentasjon med sikkerhetsfunn
      - name: Update documentation with risk assessment
        run: |
          echo "Updating documentation..."
          node update_documentation.js trivy-report.json advisory.md

      # Steg 9: Lagre sikkerhetsrapportene som artefakter
      - name: Save security reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-risk-report
          path: |
            trivy-report.json
            checkov-report.json
            risk_report.md
            advisory.md
